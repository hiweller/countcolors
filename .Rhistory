if (exists("destination")) {
png::writePNG(indicator.img, target = destination, dpi = dpi)
message(paste("Output image written to", destination))
}
destination
getwd()
save.indicator
save.indicator = "."
# Takes a path to an image and loads it
img <- colordistance::loadImage(path, lower = bg.lower, upper = bg.upper)
original <- img$original.rgb
# If saving is on but no path was specified, set it to same directory as
# original image
if (isTRUE(save.indicator)) {
destination <- paste(tools::file_path_sans_ext(path),
"_masked.png", sep = "")
} else if (is.character(save.indicator)) {
# two options:
# user provided a folder -> save as originalimage_masked.png
# user provided a full path and name -> just use that
# If save.indicator is a filepath, save as a png and set save.indicator to a
# logical value
img_sans_ext <- tools::file_path_sans_ext(path)
img_bare <- basename(img_sans_ext)
# if it's a folder, then dir.exists = TRUE
if (dir.exists(save.indicator)) {
destination <- paste0(save.indicator, "/", img_bare,
"_masked.png")
} else { # otherwise, do a couple of checks
# make sure it ends with .png
save_ext <- tools::file_ext(save.indicator)
# if it doesn't...
if (save_ext != "png") {
# store old name in a new variable
old_indicator <- save.indicator
# swap out original file extension with .png
new_indicator <- tools::file_path_sans_ext(save.indicator)
destination <- paste0("/", new_indicator, ".png")
}
}
save.indicator <- TRUE
}
destination
# If any output that requires colored indicator image is flagged, set
# get.indicator to TRUE
if (plotting | return.indicator | save.indicator) {
get.indicator <- TRUE
# Convert target.color to hex codes for indicator image
# If target.color is color names, convert to RGB matrix
if (is.character(target.color)) {
# convert color names to RGB triplets
target.color <- t(grDevices::col2rgb(target.color)) / 255
# If vector or matrix, convert to/check for 3-column matrix
} else if (is.numeric(target.color)) {
# If a vector, convert to a matrix
if (is.vector(target.color)) {
if (length(target.color) %% 3 == 0) {
target.color <- matrix(target.color, ncol = 3, byrow = TRUE)
} else {
stop(paste("Target.color must be a vector of color names",
"a vector of RGB triplets (multiple of 3)",
"or a matrix with target.colors as rows",
sep = ", "))
# If already a matrix, check that it has 3 columns
}
} else if (is.matrix(target.color)) {
if (ncol(target.color) != 3) {
stop("target.colors matrix must have 3 columns, 1 per channel")
}
}
}
# Convert to hex colors
target.color <- apply(target.color, 1,
function(i) grDevices::rgb(i[1], i[2], i[3]))
} else {
get.indicator <- FALSE
}
# If range = "spherical", check that center and radius are specified and are
# coercible to appropriate formats
if (tolower(color.range) == "spherical") {
# Check that center and radius were specified and are of appropriate types
if (!exists("center") | !exists("radius")) {
stop("Center and radius must be specified for a spherical color range")
}
# Make sure that center is of appropriate format (divisible by 3/matrix with
# 3 columns)
if (is.vector(center)) {
if (length(center) %% 3 == 0) {
center <- matrix(center, ncol = 3, byrow = TRUE)
} else {
stop("Center must be a vector with length a multiple of 3 or a matrix
of centers")
}
} else if (is.matrix(center)) {
if (ncol(center) != 3) {
stop("Centers matrix must have 3 columns, 1 per channel")
}
}
# And make sure everything is in the 0-1 range; if not, assume 0-255 and
# divide by 255
if (range(center)[2] > 1) {
center <- center / 255
}
# Make sure that an appropriate number of radii were provided
if (nrow(center) != length(radius)) {
stop("Number of centers and radii differ")
}
# If everything checks out, print the centers/radii being screened
message("Using spherical range(s):")
for (i in 1:nrow(center)) {
message(paste("Center: ", paste(center[i, ], collapse = ", "),
" +/- ", radius[i] * 100, "%", sep = ""))
}
# Make sure there are enough colors to use for color indexing; if not, just
# repeat color vector
if (length(target.color) < nrow(center)) {
target.color <- rep(target.color, round(nrow(center) /
length(target.color)) + 1)
}
# Get range using first color
filtered.img <- sphericalRange(pixel.array = original, center = center[1, ],
radius = radius[1], plotting = FALSE,
color.pixels = get.indicator,
target.color = target.color[1])
idx <- filtered.img$pixel.idx
# Keep the indicator image (color inside pixel range changed to indicator
# color) and pixel indices for later display
if (get.indicator) {
indicator.img <- filtered.img$indicator.img
}
# If more than one center/radius pair were specified, screen for each color
# in turn, but do the color indexing on the same image so we can see
# everything that is being counted
if (nrow(center) > 1) {
for (i in 2:nrow(center)) {
filtered.img <- sphericalRange(pixel.array = original,
center = center[i, ], radius = radius[i],
plotting = FALSE, color.pixels = FALSE)
if (get.indicator) {
indicator.img <- changePixelColor(indicator.img,
filtered.img$pixel.idx,
target.color = target.color[i],
return.img = TRUE, plotting = FALSE)
}
idx <- rbind(idx, filtered.img$pixel.idx)
}
}
} else if (tolower(color.range) == "rectangular") {
# If range is set to rectangular, perform similar checks
# Check that lower and upper ranges were specified
if (!exists("lower") | !exists("upper")) {
stop("Lower and upper ranges must be specified for
a rectangular color range")
}
# Make sure that lower bounds are of appropriate format (divisible by
# 3/matrix with 3 columns)
if (is.vector(lower)) {
if (length(lower) %% 3 == 0) {
lower <- matrix(lower, ncol = 3, byrow = TRUE)
} else {
stop("Lower must be a vector with length a multiple of 3
or a matrix of lower bounds")
}
} else if (is.matrix(lower)) {
if (ncol(lower) != 3) {
stop("Lower bounds matrix must have 3 columns, 1 per channel")
}
}
# Same with upper; there is probably a more elegant way to do this than just
# doing both separately... probably with quote/eval, but the variable
# reassignment makes me itchy
if (is.vector(upper)) {
if (length(upper) %% 3 == 0) {
upper <- matrix(upper, ncol = 3, byrow = TRUE)
} else {
stop("Upper must be a vector with length a multiple of 3
or a matrix of lower bounds")
}
} else if (is.matrix(upper)) {
if (ncol(upper) != 3) {
stop("Upper bounds matrix must have 3 columns, 1 per channel")
}
}
# Make sure that the same number of upper and lower bounds were provided
if (nrow(lower) != nrow(upper)) {
stop("Number of lower and upper bounds differs")
}
# And make sure everything is in the 0-1 range; if not, assume 0-255 and
# divide by 255
if (range(lower)[2] > 1 | range(upper)[2] > 1) {
lower <- lower / 255
upper <- upper / 255
}
message("Using rectangular bound(s):")
for (i in 1:nrow(lower)) {
message(paste("R: ", paste(lower[i, 1], "-", upper[i, 1], sep = ""),
"; G: ", paste(lower[i, 2], "-", upper[i, 2], sep = ""),
"; B: ", paste(lower[i, 3], "-", upper[i, 3], sep = ""),
sep = ""))
}
# Get range using first color
filtered.img <- rectangularRange(pixel.array = original, lower = lower[1, ],
upper = upper[1, ], plotting = FALSE,
color.pixels = get.indicator,
target.color = target.color[1])
idx <- filtered.img$pixel.idx
if (get.indicator) {
indicator.img <- filtered.img$indicator.img
}
# If more than one lower/upper bound pair were specified, repeat the process
# over increasingly filtered images
if (nrow(lower) > 1) {
for (i in 2:nrow(lower)) {
filtered.img <- rectangularRange(pixel.array = original,
lower = lower[i, ], upper = upper[i, ],
plotting = FALSE, color.pixels = FALSE)
if (get.indicator) {
indicator.img <- changePixelColor(indicator.img,
filtered.img$pixel.idx,
target.color = target.color[i],
return.img = TRUE, plotting = FALSE)
}
idx <- rbind(idx, filtered.img$pixel.idx)
}
}
} else {
stop("color.range must be either 'spherical' or 'rectangular'")
}
# Plot if indicated
if (plotting) {
countcolors::plotArrayAsImage(indicator.img)
}
# If destination specified (save.indicator was either TRUE or a path), save a
# comparison image with original and masked images
if (exists("destination")) {
png::writePNG(indicator.img, target = destination, dpi = dpi)
message(paste("Output image written to", destination))
}
canola <- countColors(imgs[1], color.range = "rectangular",
lower=lower, upper=upper,
target.color = "yellow", plotting = T,
save.indicator = ".", dpi = 72,
return.indicator = F)
countColors <- function(path, color.range = "spherical",
center, radius, lower, upper,
bg.lower = rep(0.8, 3), bg.upper = rep(1, 3),
target.color = c("magenta", "cyan", "yellow"),
plotting = FALSE, save.indicator = FALSE, dpi=72,
return.indicator = FALSE) {
# Takes a path to an image and loads it
img <- colordistance::loadImage(path, lower = bg.lower, upper = bg.upper)
original <- img$original.rgb
# If saving is on but no path was specified, set it to same directory as
# original image
if (isTRUE(save.indicator)) {
destination <- paste(tools::file_path_sans_ext(path),
"_masked.png", sep = "")
} else if (is.character(save.indicator)) {
# two options:
# user provided a folder -> save as originalimage_masked.png
# user provided a full path and name -> just use that
# If save.indicator is a filepath, save as a png and set save.indicator to a
# logical value
img_sans_ext <- tools::file_path_sans_ext(path)
img_bare <- basename(img_sans_ext)
# if it's a folder, then dir.exists = TRUE
if (dir.exists(save.indicator)) {
destination <- paste0(save.indicator, "/", img_bare,
"_masked.png")
} else { # otherwise, do a couple of checks
# make sure it ends with .png
save_ext <- tools::file_ext(save.indicator)
# if it doesn't...
if (save_ext != "png") {
# store old name in a new variable
old_indicator <- save.indicator
# swap out original file extension with .png
new_indicator <- tools::file_path_sans_ext(save.indicator)
destination <- paste0("/", new_indicator, ".png")
}
}
save.indicator <- TRUE
}
# If any output that requires colored indicator image is flagged, set
# get.indicator to TRUE
if (plotting | return.indicator | save.indicator) {
get.indicator <- TRUE
# Convert target.color to hex codes for indicator image
# If target.color is color names, convert to RGB matrix
if (is.character(target.color)) {
# convert color names to RGB triplets
target.color <- t(grDevices::col2rgb(target.color)) / 255
# If vector or matrix, convert to/check for 3-column matrix
} else if (is.numeric(target.color)) {
# If a vector, convert to a matrix
if (is.vector(target.color)) {
if (length(target.color) %% 3 == 0) {
target.color <- matrix(target.color, ncol = 3, byrow = TRUE)
} else {
stop(paste("Target.color must be a vector of color names",
"a vector of RGB triplets (multiple of 3)",
"or a matrix with target.colors as rows",
sep = ", "))
# If already a matrix, check that it has 3 columns
}
} else if (is.matrix(target.color)) {
if (ncol(target.color) != 3) {
stop("target.colors matrix must have 3 columns, 1 per channel")
}
}
}
# Convert to hex colors
target.color <- apply(target.color, 1,
function(i) grDevices::rgb(i[1], i[2], i[3]))
} else {
get.indicator <- FALSE
}
# If range = "spherical", check that center and radius are specified and are
# coercible to appropriate formats
if (tolower(color.range) == "spherical") {
# Check that center and radius were specified and are of appropriate types
if (!exists("center") | !exists("radius")) {
stop("Center and radius must be specified for a spherical color range")
}
# Make sure that center is of appropriate format (divisible by 3/matrix with
# 3 columns)
if (is.vector(center)) {
if (length(center) %% 3 == 0) {
center <- matrix(center, ncol = 3, byrow = TRUE)
} else {
stop("Center must be a vector with length a multiple of 3 or a matrix
of centers")
}
} else if (is.matrix(center)) {
if (ncol(center) != 3) {
stop("Centers matrix must have 3 columns, 1 per channel")
}
}
# And make sure everything is in the 0-1 range; if not, assume 0-255 and
# divide by 255
if (range(center)[2] > 1) {
center <- center / 255
}
# Make sure that an appropriate number of radii were provided
if (nrow(center) != length(radius)) {
stop("Number of centers and radii differ")
}
# If everything checks out, print the centers/radii being screened
message("Using spherical range(s):")
for (i in 1:nrow(center)) {
message(paste("Center: ", paste(center[i, ], collapse = ", "),
" +/- ", radius[i] * 100, "%", sep = ""))
}
# Make sure there are enough colors to use for color indexing; if not, just
# repeat color vector
if (length(target.color) < nrow(center)) {
target.color <- rep(target.color, round(nrow(center) /
length(target.color)) + 1)
}
# Get range using first color
filtered.img <- sphericalRange(pixel.array = original, center = center[1, ],
radius = radius[1], plotting = FALSE,
color.pixels = get.indicator,
target.color = target.color[1])
idx <- filtered.img$pixel.idx
# Keep the indicator image (color inside pixel range changed to indicator
# color) and pixel indices for later display
if (get.indicator) {
indicator.img <- filtered.img$indicator.img
}
# If more than one center/radius pair were specified, screen for each color
# in turn, but do the color indexing on the same image so we can see
# everything that is being counted
if (nrow(center) > 1) {
for (i in 2:nrow(center)) {
filtered.img <- sphericalRange(pixel.array = original,
center = center[i, ], radius = radius[i],
plotting = FALSE, color.pixels = FALSE)
if (get.indicator) {
indicator.img <- changePixelColor(indicator.img,
filtered.img$pixel.idx,
target.color = target.color[i],
return.img = TRUE, plotting = FALSE)
}
idx <- rbind(idx, filtered.img$pixel.idx)
}
}
} else if (tolower(color.range) == "rectangular") {
# If range is set to rectangular, perform similar checks
# Check that lower and upper ranges were specified
if (!exists("lower") | !exists("upper")) {
stop("Lower and upper ranges must be specified for
a rectangular color range")
}
# Make sure that lower bounds are of appropriate format (divisible by
# 3/matrix with 3 columns)
if (is.vector(lower)) {
if (length(lower) %% 3 == 0) {
lower <- matrix(lower, ncol = 3, byrow = TRUE)
} else {
stop("Lower must be a vector with length a multiple of 3
or a matrix of lower bounds")
}
} else if (is.matrix(lower)) {
if (ncol(lower) != 3) {
stop("Lower bounds matrix must have 3 columns, 1 per channel")
}
}
# Same with upper; there is probably a more elegant way to do this than just
# doing both separately... probably with quote/eval, but the variable
# reassignment makes me itchy
if (is.vector(upper)) {
if (length(upper) %% 3 == 0) {
upper <- matrix(upper, ncol = 3, byrow = TRUE)
} else {
stop("Upper must be a vector with length a multiple of 3
or a matrix of lower bounds")
}
} else if (is.matrix(upper)) {
if (ncol(upper) != 3) {
stop("Upper bounds matrix must have 3 columns, 1 per channel")
}
}
# Make sure that the same number of upper and lower bounds were provided
if (nrow(lower) != nrow(upper)) {
stop("Number of lower and upper bounds differs")
}
# And make sure everything is in the 0-1 range; if not, assume 0-255 and
# divide by 255
if (range(lower)[2] > 1 | range(upper)[2] > 1) {
lower <- lower / 255
upper <- upper / 255
}
message("Using rectangular bound(s):")
for (i in 1:nrow(lower)) {
message(paste("R: ", paste(lower[i, 1], "-", upper[i, 1], sep = ""),
"; G: ", paste(lower[i, 2], "-", upper[i, 2], sep = ""),
"; B: ", paste(lower[i, 3], "-", upper[i, 3], sep = ""),
sep = ""))
}
# Get range using first color
filtered.img <- rectangularRange(pixel.array = original, lower = lower[1, ],
upper = upper[1, ], plotting = FALSE,
color.pixels = get.indicator,
target.color = target.color[1])
idx <- filtered.img$pixel.idx
if (get.indicator) {
indicator.img <- filtered.img$indicator.img
}
# If more than one lower/upper bound pair were specified, repeat the process
# over increasingly filtered images
if (nrow(lower) > 1) {
for (i in 2:nrow(lower)) {
filtered.img <- rectangularRange(pixel.array = original,
lower = lower[i, ], upper = upper[i, ],
plotting = FALSE, color.pixels = FALSE)
if (get.indicator) {
indicator.img <- changePixelColor(indicator.img,
filtered.img$pixel.idx,
target.color = target.color[i],
return.img = TRUE, plotting = FALSE)
}
idx <- rbind(idx, filtered.img$pixel.idx)
}
}
} else {
stop("color.range must be either 'spherical' or 'rectangular'")
}
# Plot if indicated
if (plotting) {
countcolors::plotArrayAsImage(indicator.img)
}
# If destination specified (save.indicator was either TRUE or a path), save a
# comparison image with original and masked images
if (exists("destination")) {
png::writePNG(indicator.img, target = destination, dpi = dpi)
message(paste("Output image written to", destination))
}
return.list <- list(pixel.idx = unique(idx),
pixel.fraction =
nrow(unique(idx)) / nrow(img$filtered.rgb.2d))
if (return.indicator) {
return.list$indicator.img <- indicator.img
}
return(return.list)
}
canola <- countColors(imgs[1], color.range = "rectangular",
lower=lower, upper=upper,
target.color = "yellow", plotting = T,
save.indicator = ".", dpi = 72,
return.indicator = F)
save.indicator = TRUE
file_test("-f", "./bat_wing_masked.png")
file_test("-f", ".")
file.exists(".")
file.exists("./bat_wing_masked.png")
is.character(".")
file_test("-f", "./made_up_file.txt")
save.indicator
save.indicator <- "./made_up_folder/folder2"
pwd
pwd()
getwd()
save.indicator <- "../made_up_folder/folder2"
dir.exists(save.indicator)
dir.create(save.indicator)
save.indicator <- "../made_up_folder/"
dir.create(save.indicator)
save.indicator <- "../made_up_folder/folder2"
dir.create(save.indicator, recursive = T)
is.logical(c(T, F, T))
c(T, F, "test")
